#!/usr/bin/perl

use warnings;
use strict;
use Config::General;
use Data::Dumper;
use POE qw(Wheel::Run Filter::Reference Wheel::FollowTail);

# requirements :  libpoe-perl, libconfig-general-perl, libio-pty-perl

my $conf = Config::General->new(
         -ConfigFile => "../../../etc/suicideCrypt/suicideCryptd.conf",
);
my %configH = $conf->getall;

my %drives;
my %alerts;

my %logs_to_watch = (
  suicideCrypt  => "/var/log/suicideCrypt.log",
  sys   => "/var/log/syslog",
);

# Tail the Logs we care about for responses.
POE::Session->create(
  inline_states => {
    _start => \&begin_watchers,
    # Handle records from each log differently.
    suicideCrypt_record  => \&suicideCrypt_got_record,
    sys_record  => \&sys_got_record,
    # Handle log resets and errors the same way for each file.
    log_reset => \&generic_log_reset,
    log_error => \&generic_log_error,
  }
);


# Monitor UDEV for UDEV events
# change to generic system event monitor mirroring above that can be handed system demons to call. 
POE::Session->create(
    inline_states => {
        _start           => \&on_start,
        got_child_stdout => \&on_child_stdout,
        got_child_stderr => \&on_child_stderr,
        got_child_close  => \&on_child_close,
        got_child_signal => \&on_child_signal,
        read_from_stdin => \&read_from_stdin,
    }
);

$poe_kernel->run();
exit 0;

#### Subs below here. 

sub begin_watchers {
  my $heap = $_[HEAP];
  while (my ($service, $log_file) = each %logs_to_watch) {
    my $log_watcher = POE::Wheel::FollowTail->new(
      Filename   => $log_file,
      InputEvent => $service . "_record",
      ResetEvent => "log_reset",
      ErrorEvent => "log_error",
    );
    $heap->{services}->{$log_watcher->ID} = $service;
    $heap->{watchers}->{$log_watcher->ID} = $log_watcher;
  }
}

# Handle log resets the same way for each file.  Simply recognize that
# the log file was reset.
sub generic_log_reset {
  my ($heap, $wheel_id) = @_[HEAP, ARG0];
  my $service = $heap->{services}->{$wheel_id};
  print "--- $service log reset at ", scalar(gmtime), " GMT\n";
}

# Handle log errors the same way for each file.  Recognize that an
# error occurred while watching the file, and shut the watcher down.
# If this were a real log watcher, it would periodically try to resume
# watching the log file.
sub generic_log_error {
  my ($heap, $operation, $errno, $error_string, $wheel_id) =
    @_[HEAP, ARG0, ARG1, ARG2, ARG3];
  my $service = $heap->{services}->{$wheel_id};
  print "--- $service log $operation error $errno: $error_string\n";
  print "--- Shutting down $service log watcher.\n";
  delete $heap->{services}->{$wheel_id};
  delete $heap->{watchers}->{$wheel_id};
}

sub suicideCrypt_got_record {
  my $log_record = $_[ARG0];

  print "New CryptLog line! : $log_record\n";
  return;
}

sub sys_got_record {
  my $log_record = $_[ARG0];

#  print "New SysLog line! : $log_record";
  return;
}

sub on_start {
    my $child = POE::Wheel::Run->new(
        Conduit => 'pty-pipe',
        Program     => ["udevadm monitor" ],
        StdoutEvent => "got_child_stdout",
        StderrEvent => "got_child_stderr",
        CloseEvent  => "got_child_close",
    );
    my $name = "udevadm";
    $alerts{$name}{alert} = 0;
    $_[KERNEL]->sig_child($child->PID, "got_child_signal");

    $_[HEAP]{children_by_wid}{$child->ID} = $child;
    $_[HEAP]{children_by_pid}{$child->PID} = $child;
    $_[HEAP]->{job} = $child;

    print("Child pid ", $child->PID, " started as wheel ", $child->ID,
".\n");
}

sub on_child_stdout {
    my ($stdout_line, $wheel_id) = @_[ARG0, ARG1];
    my $child = $_[HEAP]{children_by_wid}{$wheel_id};
    if ($stdout_line =~ m/usb/) {
      if (!($alerts{udevadm}{alert})) {
        $alerts{udevadm}{alert} = 1;
        print "WARNING! USB State change detected\n";
      }
    }
#    print "pid ", $child->PID, " STDOUT: $stdout_line\n";
}

sub on_child_close {
    my $wheel_id = $_[ARG0];
    my $child    = delete $_[HEAP]{children_by_wid}{$wheel_id};

    unless (defined $child) {
        print "wid $wheel_id closed all pipes.\n";
        return;
    }

    print "pid ", $child->PID, " closed all pipes.\n";
    delete $_[HEAP]{children_by_pid}{$child->PID};
}

sub on_child_signal {
    print "pid $_[ARG1] exited with status $_[ARG2].\n";
    my $child = delete $_[HEAP]{children_by_pid}{$_[ARG1]};

    # May have been reaped by on_child_close() .
    return unless defined $child;
    delete $_[HEAP]{children_by_wid}{$child->ID};
}

