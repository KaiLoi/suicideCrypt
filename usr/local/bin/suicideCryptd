#!/usr/bin/perl

use warnings;
use strict;
use JSON;
use Config::General;
use Data::Dumper;
use POE qw(Wheel::Run Filter::Reference Wheel::FollowTail);

# requirements :  libpoe-perl, libconfig-general-perl, libio-pty-perl libjson-perl

my $conf = Config::General->new(
         -ConfigFile => "../../../etc/suicideCrypt/suicideCryptd.conf",
);
my $VERSION = 0.5;
my $DEBUG = 0;
my %configH = $conf->getall;
my $VERBOSE = $configH{verbose};
my @logsToWatch;
my %VOLUMES;
my %MANUALVOLUMES;
my %ALERTS;
my $ALERTTEMP = 33;
my @systemUsers = getSystemUsers();
my @allowedUsers = getAllowedUsers();

print "\n *** Starting suicideCryptd version $VERSION *** \n\n" if $VERBOSE;
print "-> Starting Moitoring Sessions...\n" if $VERBOSE;
# Tail the Logs we care about for responses.
POE::Session->create(
  inline_states => {
    _start => \&begin_watchers,
    # Handle records from each log differently.
    ossec_record  => \&ossec_got_record,
    auth_record  => \&auth_got_record,
    # Handle log resets and errors the same way for each file.
    log_reset => \&generic_log_reset,
    log_error => \&generic_log_error,
  }
);

# POE session to check for new suicideCrypt mounts and add them to monitoring. 
POE::Session->create(
  inline_states => {
    _start => sub {
      $_[KERNEL]->alias_set('MountWatchdog');
      $_[HEAP]->{next_alarm_time} = int(time()) + 5;
      $_[KERNEL]->alarm(tick => $_[HEAP]->{next_alarm_time});
    },
    tick => sub {
      my $key;
      my $name;
      my %tempvol;

      %tempvol = getMounted();
      updateVols(\%tempvol);

      $_[HEAP]->{next_alarm_time} = $_[HEAP]->{next_alarm_time} + 5;
      $_[KERNEL]->alarm(tick => $_[HEAP]->{next_alarm_time});
    },
  },
);

# POE session to run round looking for alerts.
POE::Session->create(
  inline_states => {
    _start => sub {
      $_[KERNEL]->alias_set('AlertWatchdog');
      $_[HEAP]->{next_alarm_time} = int(time()) + 2;
      $_[KERNEL]->alarm(tick => $_[HEAP]->{next_alarm_time});
    },
    tick => sub {
      my $key;
      my $name;


      foreach $key (keys %ALERTS) {
        if ($ALERTS{$key}{alert}) {
          print "\n\n*\\ Alert!\n" if $VERBOSE;
          if ($key =~ /temp/) {
            print "**\\------> We have detected a potential RAM chill event from lm-sensors: $key!\n" if $VERBOSE;
          } elsif ($key =~ /udev/) {
	    print "**\\------> We have detected a UDEV hardware change event $key!\n" if $VERBOSE;
          } elsif ($key =~ /ossec/) {
            print "**\\------> We have detected a ossec alert event $key!\n" if $VERBOSE;
          } elsif ($key =~ /auth/) { 
            print "**\\------> We have detected an auth log alert event $key!\n" if $VERBOSE;
          }
          # reset the alert; 
          $ALERTS{$key}{alert} = 0;
        }
      }
      $_[HEAP]->{next_alarm_time} = $_[HEAP]->{next_alarm_time} + 2;
      $_[KERNEL]->alarm(tick => $_[HEAP]->{next_alarm_time});
    },
  },
);

# Start a POE session to monitor lm-sensors for temperature events
if ($configH{systemevents}{sensors}{enabled}) {
  print "  -> Starting an lm-sensors monitor\n" if $VERBOSE;
  POE::Session->create(
    inline_states => {
      _start      => \&startsensors,
      got_child_stdout   => \&got_child_stdout,
      got_child_stderr => \&got_child_stderr,
      got_child_close   => \&got_child_close,
      got_sigchld   => \&got_sigchld,
    }
  );
}

# Start a POE session to monito udevadm for HW additions and removals. 
if ($configH{systemevents}{udevadm}{enabled}) {
  print "  -> Starting a udevadm monitor\n" if $VERBOSE;
  POE::Session->create(
    inline_states => {
      _start      => \&startudevadm,
      got_child_stdout   => \&got_child_stdout,
      got_child_stderr => \&got_child_stderr,
      got_child_close   => \&got_child_close,
      got_sigchld   => \&got_sigchld,
    }
  );
}

print "-> All configured monitors starts.\n" if $VERBOSE;

# Start our POE Kernel.
$poe_kernel->run();
exit 0;

#### Subs below here. 

sub begin_watchers {
  my $heap = $_[HEAP];
  my $key;
  my $service;
  my $log_file;
  my $log_watcher;

  foreach $key (keys(% {$configH{logs}} )) {
    unless ($configH{logs}{$key}{enabled}) {
	next;
    }
    $service = $key;
    $ALERTS{$service}{alert} = 0;
    $log_file = $configH{logs}{$key}{location};
    print "  -> Starting a log watch processs for $key!\n";
    $log_watcher = POE::Wheel::FollowTail->new(
	Filename   => $log_file,
	InputEvent => $service . "_record",
	ResetEvent => "log_reset",
	 ErrorEvent => "log_error",
    );
    $heap->{services}->{$log_watcher->ID} = $service;
    $heap->{watchers}->{$log_watcher->ID} = $log_watcher;
  }
}

# Handle log resets the same way for each file.  Simply recognize that
# the log file was reset.
sub generic_log_reset {
  my ($heap, $wheel_id) = @_[HEAP, ARG0];
  my $service = $heap->{services}->{$wheel_id};
  print "--> $service log reset at ", scalar(gmtime), " GMT\n" if $VERBOSE;
}

# Handle log errors the same way for each file.  Recognize that an
# error occurred while watching the file, and shut the watcher down.
# If this were a real log watcher, it would periodically try to resume
# watching the log file.
sub generic_log_error {
  my ($heap, $operation, $errno, $error_string, $wheel_id) =
    @_[HEAP, ARG0, ARG1, ARG2, ARG3];
  my $service = $heap->{services}->{$wheel_id};
  print "--> $service log $operation error $errno: $error_string\n" if $VERBOSE;
  print "--> Shutting down $service log watcher.\n";
  delete $heap->{services}->{$wheel_id};
  delete $heap->{watchers}->{$wheel_id};
}

sub ossec_got_record {
  my $log_record = $_[ARG0];
  my $alertLevel;

  # Ok, we got a new OSSec alert, lets parse for a level of dangerous.
  if ($log_record =~ m/level (\d+)/ ) {
    if ($1 >= 11) {
      $ALERTS{ossec}{alert} = 1;
    }
  }
  return;
}

sub auth_got_record {
  my $log_record = $_[ARG0];
  my $user; 
  my $okUser;
  my $ok = 0;

  if ($log_record =~ m/session opened for user (\w+) /) {
    $user = $1;
    if (($log_record =~ m/cron:session/) && ($configH{logs}{auth}{ignorecron})) {
      # Ignore this as we are allowing CRON events (Geenrally a good idea)
      return 1;
    }
    foreach $okUser (@allowedUsers) {
      if ($okUser eq $user) {
        $ok = 1;
      }
    }
    if ($ok) {
      # User is in the OK list, more on and reset $ok for next check
      $ok = 0;
    } else { 
      # non allowed user logged in! Panic!
      $ALERTS{auth}{alert} = 1;
    }
  }
  return;
}

sub startsensors {
  my ($kernel, $heap) = @_[KERNEL, HEAP];

  $heap->{child} = POE::Wheel::Run->new(
    Program => sub { monitor_sensors() },
    StdioFilter  => POE::Filter::Line->new(),    # Child speaks in lines.
    StderrFilter => POE::Filter::Line->new(),    # Child speaks in lines.
    StdoutEvent  => "got_child_stdout",          # Child wrote to STDOUT.
    StderrEvent  => "got_child_stderr",          # Child wrote to STDERR.
    CloseEvent   => "got_child_close",           # Child stopped writing.
  );
  $kernel->sig_child($heap->{child}->PID, "got_sigchld");
}

sub startudevadm {
  my ($kernel, $heap) = @_[KERNEL, HEAP];

  $heap->{child} = POE::Wheel::Run->new(
    Program => ["udevadm monitor"],    # Program to run.
    Conduit => 'pty-pipe',
    StdioFilter  => POE::Filter::Line->new(),    # Child speaks in lines.
    StderrFilter => POE::Filter::Line->new(),    # Child speaks in lines.
    StdoutEvent  => "got_child_stdout",          # Child wrote to STDOUT.
    StderrEvent  => "got_child_stderr",          # Child wrote to STDERR.
    CloseEvent   => "got_child_close",           # Child stopped writing.
  );
  $kernel->sig_child($heap->{child}->PID, "got_sigchld");
}

sub monitor_sensors {
  my $result;
  my @lines;
  my $line;
  my $sensor;
  my $temp;
  
  while (1) {  
    $result = `sensors -u`;
    @lines = split (/\n/, $result);
      foreach $line (@lines) {
        if ($line =~ /(temp\d*)_input: (\d*).\d*/) {
	  ($sensor, $temp) = ($1, $2);
          if ($temp <= $ALERTTEMP) {
            print "sensors,$sensor,$temp\n";
          }
        }
     }
     sleep 1;
   }
} 

# Deal with information the child wrote to its STDOUT.
sub got_child_stdout {
  my $stdout = $_[ARG0];
  my @values;


  if ($stdout =~ /^UDEV/) {
    processUDEV($stdout);
  }
  if ($stdout =~ /,/) { 
    @values = split(/,/, $stdout);
    if ($values[0] eq "sensors") {
      $ALERTS{$values[1]}{alert} = 1;
    }
  }
}

# Deal with information the child wrote to its STDERR.  These are
# warnings and possibly error messages.
sub got_child_stderr {
  my $stderr = $_[ARG0];
  $stderr =~ tr[ -~][]cd;
  print "STDERR: $stderr\n";
}

# The child has closed its output filehandles.  It will not be sending
# us any more information, so destroy it.
sub got_child_close {
  my $heap = $_[HEAP];
  print "child closed.\n";
  delete $heap->{child};
}

# Handle SIGCHLD, otherwise the child process will not be reaped.
# Don't do anything significant, but do catch the signal so the child
# process is reaped.
sub got_sigchld {
  print "SIGCHLD reaped.\n";
}

sub processUDEV {
  my $msg = shift;
  my @message = split(' ', $msg);

#  print "$message[4]\n";
  if ($message[4] eq "(usb)") {
    if ($configH{systemevents}{udevadm}{devices}{usb}) {
      print "--> USB State change!\n" if $DEBUG;
      $ALERTS{udevadm}{alert} = 1;
    }
  } elsif ($message[4] eq "(hid)") {
    if ($configH{systemevents}{udevadm}{devices}{keyboardmouse}) {
      print "--> Keyboard or Mouse state change detected!\n" if $DEBUG;
      $ALERTS{udevadm}{alert} = 1;
    }
  } elsif ($message[4] eq "(drm)") {
    if ($configH{systemevents}{udevadm}{devices}{monitor}) {
      print "--> Potential Monitor state change detected!\n" if $DEBUG;
      $ALERTS{udevadm}{alert} = 1;
    }
   # Not really wise at this point to put this in until can tree UDEV devices, otherwise
   # we detect a suicideCrypt drive creation as an alert and delete it. FAIL.
#  } elsif ($message[4] eq "(block)" || $message[4] eq "(scsi)") {
#    if ($configH{systemevents}{udevadm}{devices}{disk}) {
#      print "Potential Hard disk or USB Disk state change detected!\n" if $DEBUG;
#      $alerts{udevadm}{alert} = 1;
#    }
  }
}

sub getSystemEvents {
  my $key;
  my @results;

  foreach $key (%{$configH{systemevents}}) {
    if ($configH{systemevents}{$key}{enabled}) {
      push @results, $key;
    }
  }
  return @results;
}


sub getSystemUsers {

  my $fh;
  my @users;
  my @line;
  my $user;
  my $filename = "/etc/passwd";


  open($fh, '<', $filename) or die "Could not open file '$filename' $!";
  while (<$fh>) {
    @line = split(/:/, $_);
    if ($line[2] < 1000)  {
      push @users, $line[0];
    }
  }
  return @users;
}

sub getAllowedUsers {
  my @allowed;

  @allowed = split(/,/, $configH{logs}{auth}{allowedusers});
  if ($configH{logs}{auth}{allowsystemusers}) {
    @allowed = (@allowed, @systemUsers);
  }
  return @allowed;
}

sub getMounted {

  my $devCmdJ = "lsblk -J -s -p";
  my $cmdOutput;
  my $dev;
  my $volume;
  my $child;
  my $count = 1;
  my %vols;
  my $mountpoint;

  $cmdOutput = `$devCmdJ`;

  $dev = from_json($cmdOutput, {utf8 => 1});

  foreach my $volume (@{ $dev->{'blockdevices'} }) {
    $mountpoint = $volume->{mountpoint};
    if ($volume->{name} =~ "suicideCrypt-") {
      $vols{$mountpoint}{'mapper'} = $volume->{name};
      $vols{$mountpoint}{'type'} = "suicideCrypt";
      $vols{$mountpoint}{'mountpoint'} = $volume->{mountpoint};
      foreach my $child (@{ $volume->{'children'} }) {
         $vols{$mountpoint}{'blkdev'} = $child->{name}
      }
    }
  }
  return %vols;
}

sub updateVols {
  my %volhash = %{$_[0]};
  my $key;
  my $found = 0;

  # Check if the drives found are being monitored and if not start watching them.
  foreach $key (keys(%volhash)) {
    if (!$VOLUMES{$key}) {
      print "  --> New suicideCrypt volume detected, inserting into monitoring hash\n" if ($DEBUG >= 2);
      $VOLUMES{$key} = $volhash{$key};
    } else {
      print "  --> Returned Volume already being watched, ignoring and continuing\n" if ($DEBUG >= 2);
    }
  }
  # find drives that have gone away and stop watching them.
  foreach $key (keys(%VOLUMES)) {
    if ($volhash{$key}) {
      # Volume still exists Don't need to do anything
    } else {
      # Volume has gone away since we last enumerated. Since we didn't delete it,
      # clearly someone manually removed it
      print "  --> Drive removed since last check, stopping monitoring\n" if ($DEBUG >= 2);
      delete $VOLUMES{$key};
    }
  }
}

### EOF ###
